/**
 * @credits Original by Alexis Bouhet - https://zouloux.com
 * @credits Adapted by Willy Brauner - https://willybrauner.com
 */

/**
 * Sprite name : {{spriteName}}
 * Sprite prefix : {{spritePrefix}}
 * Sprite seed : {{spriteSeed}}
 */

// ----------------------------------------------------------------------------- SPRITE

/**
 * This mixin contains all properties about this sprite.
 * Use this mixin to gain access to those variables.
 */
.{{spritePrefix}}-vars()
{
	// Sprite size
	@sprite-width: {{spriteWidth}}px;
	@sprite-height: {{spriteHeight}}px;

	// Full texture path
	@sprite-path: '{{spritePath}}';

	// The build seed to use with this sprite.
	// Usefull to clear cache
	@sprite-seed: '{{spriteSeed}}';
}

/**
 * Target the sprite as background.
 * Note : import this sprite as (reference) to disable this declaration polluting output CSS file.
 */
.{{spritePrefix}}
{
	background-repeat: no-repeat;
	background-image: url('{{spritePath}}');
}


{{#each textures}}
// ----------------------------------------------------------------------------- {{name}}

/**
 * Size and position as variables.
 * Use this mixin to gain access to those variables.
 */
.{{../spritePrefix}}-{{name}}-vars ()
{
	@texture-x       : -{{x}}px;
	@texture-y       : -{{y}}px;
	@texture-width   : {{width}}px;
	@texture-height  : {{height}}px;
}

/**
 * PX relative sprite size mixin.
 * @ratio is the ratio of the generated sprite. .5 for retina, 1 for regular.
 */
.{{../spritePrefix}}-{{name}}-scale (@ratio : 1)
{
	.{{../spritePrefix}}-{{name}}-vars();
	.{{../spritePrefix}}-vars();

	width   : (@texture-width * @ratio);
	height  : (@texture-height * @ratio);
	background-position : (@texture-x * @ratio) (@texture-y * @ratio);
	background-size     : (@sprite-width * @ratio) (@sprite-height * @ratio);
}

/**
 * EM relative sprite size mixin.
 * @ratio is the relative size in em. You can use @emRatio property to convert em to px.
 * Ex : (.5 / @emRatio) will show a retina sprite at size 1 for a font-size of 1em.
 */
.{{../spritePrefix}}-{{name}}-em (@ratio : 1)
{
	.{{../spritePrefix}}-{{name}}-vars();
	.{{../spritePrefix}}-vars();

	width   : unit((@texture-width * @ratio), em);
	height  : unit((@texture-height * @ratio), em);
	background-position : unit((@texture-x * @ratio), em) unit((@texture-y * @ratio), em);
	background-size     : unit((@sprite-width * @ratio), em) unit((@sprite-height * @ratio), em);
}

/**
 * VW relative sprite size mixin.
 * @viewPortWidthSpriteRatio is a viewport width ratio between 0 and 1.
 */
.{{../spritePrefix}}-{{name}}-vw (@viewPortWidthSpriteRatio)
{
	.{{../spritePrefix}}-{{name}}-vars();
	.{{../spritePrefix}}-vars();

	// Multiplying viewport width ratio (between 0 to 1) to a percentage
	@viewPortPercentage : (@viewPortWidthSpriteRatio * 100);

	// Ratio between height and width on target texture
	@axisRatio : (@texture-height / @texture-width);

	// Stick width to the viewport percentage value
	width               : unit(@viewPortPercentage, vw);

	// Compute height in viewport width unit, taking axis ratio to have the same ratio as the texture
	height              : unit((@axisRatio * @viewPortPercentage), vw);

	// Determinant value is the texture width.                  we multiply by the viewport percentage to
	// If we need to show a small texture                       be on the same ratio as the dom element width
	// the final value will be bigger.       ⬇                        ⬇
	background-size     : unit((@sprite-width / @texture-width * @viewPortPercentage), vw)
												unit((@sprite-height / @texture-height * @axisRatio * @viewPortPercentage), vw);
	//                                                               ⬆
  //                                we still have the axis ratio between height and width to apply

	// We have the same order of magnitude than the size          Texture position is also relative to full sprite size
	//                                       ⬇                          ⬇
	background-position : unit((@sprite-width / @texture-width * @texture-x / @sprite-width * @viewPortPercentage), vw)
												unit((@sprite-height / @texture-height * @axisRatio * @texture-y / @sprite-height * @viewPortPercentage), vw);
	//                                                               ⬆
  //                                we still have the axis ratio between height and width to apply
}

/**
 * CSS Injected declaration
 * Note : import this sprite as (reference) to disable this declaration polluting output CSS file.
 * Regular (ratio 1)
 */
.{{../spritePrefix}}-{{name}}
{
	.{{../spritePrefix}}-{{name}}-scale(1);
}

/**
 * CSS Injected declaration
 * Note : import this sprite as (reference) to disable this declaration polluting output CSS file.
 * Retina (ratio 0.5)
 */
.{{../spritePrefix}}-{{name}}-retina
{
	.{{../spritePrefix}}-{{name}}-scale(.5);
}

{{/each}}
